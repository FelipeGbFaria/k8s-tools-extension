{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { existsSync, lstatSync } from 'fs';\nimport { join } from 'path';\nimport { spawn } from 'child_process';\n\n// globals\nconst extensionName = 'k8s-tools';\nconst k8sToolName = 'k8s-tool.sh';\n\n// helper funcs\n// const execShell = (command: string): Promise<{ success: boolean, error?: string }> => new Promise(resolve => {\n// \texec(command, (error) => {\n// \t\tif (error) {\n// \t\t\treturn resolve({ success: false, error: error.message });\n// \t\t}\n// \t\treturn resolve({ success: true });\n// \t});\n// });\n\nconst execShell = (args: string[], cwd: string): Promise<{ success: boolean, error?: string }> =>\n\tnew Promise(resolve => {\n\t\tconst child = spawn(join(cwd, k8sToolName), args, { cwd });\n\t\tlet error: string;\n\t\t\n\t\tchild.stderr.on('data', (data) => {\n\t\t\terror = data;\n\t\t});\n\n\t\tchild.on('close', (code) => {\n\t\t\tif (Number(code) !== 0) {\n\t\t\t\tresolve({ success: false, error })\n\t\t\t} else {\n\t\t\t\tresolve({ success: true });\n\t\t\t}\n\t\t});\n\t});\n\nexport function activate(context: vscode.ExtensionContext) {\n\tconst sync = vscode.commands.registerCommand(`${extensionName}.syncPod`, async () => {\n\t\tconst config = vscode.workspace.getConfiguration(extensionName);\n\t\tconst k8sFolder: string|undefined = config.get(\"k8s-folder\");\n\t\tconst syncablePods: string[]|undefined = config.get(\"syncable-pods\");\n\n\t\tif (!k8sFolder) {\n\t\t\tvscode.window.showErrorMessage(`${extensionName}.k8s-folder setting was not defined`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!existsSync(k8sFolder) || !lstatSync(k8sFolder).isDirectory()) {\n\t\t\tvscode.window.showErrorMessage(`${extensionName}.k8s-folder setting is not a valid directory`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!existsSync(join(k8sFolder, k8sToolName))) {\n\t\t\tvscode.window.showErrorMessage(`${k8sToolName} not found in ${extensionName}.k8s-folder setting directory`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!syncablePods || syncablePods.length === 0) {\n\t\t\tvscode.window.showErrorMessage(`Please provide options in ${extensionName}.syncable-pods`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst podName = await vscode.window.showQuickPick(syncablePods, { title: 'Select pod' });\n\t\tif (!podName) {\n\t\t\treturn;\n\t\t}\n\n\t\tvscode.window.showInformationMessage(`Starting sync for ${podName}...`);\n\n\t\tconst result = await execShell(['sync', podName], k8sFolder);\n\t\tif (result.success) {\n\t\t\tvscode.window.showInformationMessage(`Sync successfull for ${podName}`);\n\t\t} else {\n\t\t\tvscode.window.showErrorMessage(result.error!);\n\t\t}\n\t});\n\n\tconst redeployAll = vscode.commands.registerCommand(`${extensionName}.redeployAll`, async () => {\n\t\tconst config = vscode.workspace.getConfiguration(extensionName);\n\t\tconst k8sFolder: string|undefined = config.get(\"k8s-folder\");\n\n\t\tif (!k8sFolder) {\n\t\t\tvscode.window.showErrorMessage(`${extensionName}.k8s-folder setting was not defined`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!existsSync(k8sFolder) || !lstatSync(k8sFolder).isDirectory()) {\n\t\t\tvscode.window.showErrorMessage(`${extensionName}.k8s-folder setting is not a valid directory`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!existsSync(join(k8sFolder, k8sToolName))) {\n\t\t\tvscode.window.showErrorMessage(`${k8sToolName} not found in ${extensionName}.k8s-folder setting directory`);\n\t\t\treturn;\n\t\t}\n\n\t\tvscode.window.showInformationMessage('Redeploying all components...');\n\n\t\tconst result = await execShell(['redeploy', 'all'], k8sFolder);\n\t\tif (result.success) {\n\t\t\tvscode.window.showInformationMessage('Redeploy all successfull');\n\t\t} else {\n\t\t\tvscode.window.showErrorMessage(result.error!);\n\t\t}\n\t});\n\n\tcontext.subscriptions.push(sync, redeployAll);\n}\n\nexport function deactivate() {}\n"],
  "mappings": "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",
  "names": []
}
